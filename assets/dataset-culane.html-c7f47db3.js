import{_ as i}from"./lane-define-fd3fb804.js";import{_ as o,r as d,o as c,c as t,a,d as e,b as l,e as s}from"./app-7b5e955f.js";const r="/mobile-robot-docs/assets/labelme-pipline-7e7d9142.jpg",p="/mobile-robot-docs/assets/labelme-createLineStrip-127cf7e7.png",m="/mobile-robot-docs/assets/labelme-setlabel-133bec9e.jpg",u={},v=s('<h1 id="culane" tabindex="-1"><a class="header-anchor" href="#culane" aria-hidden="true">#</a> CULane</h1><ul><li><a href="#culane">CULane</a><ul><li><a href="#%E8%BD%A6%E9%81%93%E7%BA%BF%E5%AE%9A%E4%B9%89">车道线定义</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D">数据集介绍</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8B%E8%BD%BD">数据集下载</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E9%9B%86%E7%BB%93%E6%9E%84">数据集结构</a></li><li><a href="#%E8%AE%AD%E7%BB%83%E6%96%87%E4%BB%B6">训练文件</a></li><li><a href="#%E6%A0%87%E6%B3%A8%E6%A0%BC%E5%BC%8F">标注格式</a></li></ul></li><li><a href="#%E8%87%AA%E5%88%B6%E6%95%B0%E6%8D%AE%E9%9B%86">自制数据集</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">数据集目录结构</a></li><li><a href="#%E9%87%87%E9%9B%86%E6%95%B0%E6%8D%AE%E9%9B%86">采集数据集</a></li><li><a href="#%E6%A0%87%E6%B3%A8%E6%B5%81%E7%A8%8B%E5%8F%8A%E8%A7%84%E8%8C%83">标注流程及规范</a></li><li><a href="#%E6%A0%87%E6%B3%A8%E5%AE%8C%E6%88%90%E5%90%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86">标注完成后数据处理</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%AC%E6%8D%A2">数据集转换</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A3%80%E6%9F%A5">数据集检查</a></li></ul></li></ul></li></ul><h2 id="车道线定义" tabindex="-1"><a class="header-anchor" href="#车道线定义" aria-hidden="true">#</a> 车道线定义</h2><p><img src="'+i+'" alt="culane"></p><p>如上图所示,CULane 数据集中定义了 4 条车道线，分别为 <code>1</code>(左左)、<code>2</code>(左)、<code>3</code>(右)、<code>4</code>(右右)；此外还有另一种表述方式，<code>1</code>(左)、<code>2</code>/<code>3</code>(自车道线)、<code>4</code>(右)</p><h2 id="数据集介绍" tabindex="-1"><a class="header-anchor" href="#数据集介绍" aria-hidden="true">#</a> 数据集介绍</h2><h3 id="数据集下载" tabindex="-1"><a class="header-anchor" href="#数据集下载" aria-hidden="true">#</a> 数据集下载</h3>',7),b={href:"https://xingangpan.github.io/projects/CULane.html",target:"_blank",rel:"noopener noreferrer"},h=a("a",{href:"#%E6%95%B0%E6%8D%AE%E9%9B%86%E7%BB%93%E6%9E%84"},"数据集结构",-1),k=s(`<p>下载完成后，设置环境变量 <code>CULANEROOT</code> 为数据集路径，可以写入 <code>~/.bashrc</code> 中，或者在每次使用时设置。设置完成后，下面的描述中将使用 <code>$CULANEROOT</code> 表示数据集路径。</p><div class="language-shhell line-numbers-mode" data-ext="shhell"><pre class="language-shhell"><code># ~/.bashrc
export CULANEROOT=/path/to/CULane
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行如下命令，解压数据集</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> datasets/unpack-CULane.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据集结构" tabindex="-1"><a class="header-anchor" href="#数据集结构" aria-hidden="true">#</a> 数据集结构</h3><p>得到目录结构如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$CULANEROOT</span>
<span class="token operator">|</span>──driver_xx            <span class="token comment"># 按视频文件划分的原始图像和点标注</span>
<span class="token operator">|</span>──<span class="token punctuation">..</span>.                  <span class="token comment"># 多个</span>
<span class="token operator">|</span>──laneseg_label_w16    <span class="token comment"># 分割标注</span>
└──list                 <span class="token comment"># 训练文件列表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>driver_xx</code> : 按视频文件划分的原始图像和点标注</li><li><code>laneseg_label_w16</code> : 分割标注</li><li><code>list</code> : 训练文件列表，包括训练集 <code>train_gt.txt</code> 和验证集 <code>val_gt.txt</code></li></ul><h3 id="训练文件" tabindex="-1"><a class="header-anchor" href="#训练文件" aria-hidden="true">#</a> 训练文件</h3><p><code>list</code> 中 <code>train_gt.txt</code> 文件记录了训练的文件径和车道线位置</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>/dir1/00000.jpg /dir2/00000.png 1 1 1 1
/dir1/00030.jpg /dir2/00030.png 0 1 1 1
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>dir1</code>内的文件表示车道线点的图像和标注，<code>dir2</code>内的文件表示车道线分割图像，这两种目录对应两种不同车道线检测的路线，前者对应点检测的方法，后者对应分割算法，UFLD算法是点检测算法，所以通常只需要使用到<code>dir1</code>内文件。</li><li>最后的4个数字分别表示 <code>1</code>/<code>2</code>/<code>3</code>/<code>4</code> 的车道线是否存在</li></ul><h3 id="标注格式" tabindex="-1"><a class="header-anchor" href="#标注格式" aria-hidden="true">#</a> 标注格式</h3><p>在<code>dir1</code>中每张图像都有其对应的标注文件，文件后缀为 <code>.lines.txt</code>，标注文件大致结构如下</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>-16.9803 490 21.2945 480 ...
267.511 590 284.513 580 ...
1197.91 590 1185.25 580 ...
1649.3 450 1598.81 440 ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>每一行表示一条车道线，每一行分别为标注的点的坐标，例如 <code>-16.9803 490 21.2945 480 ...</code> 表示该车道线上标注的点的坐标为 <code>(-16.9803, 490), (21.2945, 480), ...</code></li><li>每条车道线最长大约32个点，但是应该不少于10个点</li><li>不存在车道线的情况不标准</li></ul><p>这里提供一个脚本查看对应图像的标注情况，<code>&lt;label_dir&gt;</code>是图片和标注的目录，需要自行修改，输出结果保存在 <code>&lt;label_dir&gt;-check</code> 目录下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 datasets/check-culane.py <span class="token parameter variable">--label_dir</span> <span class="token operator">&lt;</span>label_dir<span class="token operator">&gt;</span>
<span class="token comment"># 例如 </span>
python3 datasets/check-culane.py <span class="token parameter variable">--label_dir</span> <span class="token operator">&lt;</span>path-to-CULane<span class="token operator">&gt;</span>/driver_100_30frame/05260019_0572.MP4\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自制数据集" tabindex="-1"><a class="header-anchor" href="#自制数据集" aria-hidden="true">#</a> 自制数据集</h2><h3 id="数据集目录结构" tabindex="-1"><a class="header-anchor" href="#数据集目录结构" aria-hidden="true">#</a> 数据集目录结构</h3><p>为了和 CULane 数据集结构保持一致，我们将自制数据集的目录结构规定如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$CULANEROOT</span> <span class="token comment"># 环境变量中设置的数据集路径</span>
<span class="token operator">|</span>──videos   <span class="token comment"># 原始视频文件</span>
<span class="token operator">|</span>   <span class="token operator">|</span>──video1.mp4   <span class="token comment"># 视频1</span>
<span class="token operator">|</span>   <span class="token operator">|</span>──video2.mp4   <span class="token comment"># 视频2</span>
<span class="token operator">|</span>   └──<span class="token punctuation">..</span>.
<span class="token operator">|</span>──raw_images   <span class="token comment"># 原始采集的图像</span>
<span class="token operator">|</span>   <span class="token operator">|</span>──video1     <span class="token comment"># 视频1的图像</span>
<span class="token operator">|</span>   <span class="token operator">|</span>  <span class="token operator">|</span>──video1-0.jpg  <span class="token comment"># 第0帧图像</span>
<span class="token operator">|</span>   <span class="token operator">|</span>  <span class="token operator">|</span>──video1-0.json <span class="token comment"># 第0帧图像的 labelme 标注</span>
<span class="token operator">|</span>   <span class="token operator">|</span>  └──<span class="token punctuation">..</span>.
<span class="token operator">|</span>   <span class="token operator">|</span>──video2
<span class="token operator">|</span>   └──<span class="token punctuation">..</span>.
<span class="token operator">|</span>──images   <span class="token comment"># 标注完成后端数据</span>
<span class="token operator">|</span>   <span class="token operator">|</span>──video1-0.jpg
<span class="token operator">|</span>   <span class="token operator">|</span>──video1-0.lines.txt
<span class="token operator">|</span>   └──<span class="token punctuation">..</span>.
<span class="token operator">|</span>──labels   <span class="token comment"># 标签文件</span>
<span class="token operator">|</span>   <span class="token operator">|</span>──video1-0.png
<span class="token operator">|</span>   └──<span class="token punctuation">..</span>.
└──list     <span class="token comment"># 训练文件列表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>自制数据集可以自定义名称，但是需要设置环境变量 <code>CULANEROOT</code> 为数据集路径，并写入环境变量 <code>~/.bashrc</code> 中。因为在数据集相关的处理的脚本中会直接读取环境变量 <code>CULANEROOT</code></p></blockquote><h3 id="采集数据集" tabindex="-1"><a class="header-anchor" href="#采集数据集" aria-hidden="true">#</a> 采集数据集</h3><p>数据集的采集需要拍摄视频，要求：</p><ul><li>拍摄要求稳定，尽量避免抖动</li><li>运动过程中开始拍摄，在停止运动前结束拍摄，这是为了避免视频中存在静止不动的片段</li></ul><p>拍摄完成视频后，需要修改视频名称，修改为拍摄时间，例如 <code>20210801_101234.mp4</code>，并将视频放入 <code>$CULANEROOT/videos</code> 目录下。整理完视频后，运行如下命令，将视频切分为图像，并在图像文件旁生成对应的预标注文件，预标注文件是 labelme 格式，采样传统视觉的算法进行预先标注，如果效果不好，可以将预标注文件删除，重新标注。标注完成后。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 datasets/split-video.py
<span class="token comment"># datasets/split-video-using-onnx.py # 使用 onnx 进行预标注</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标注流程及规范" tabindex="-1"><a class="header-anchor" href="#标注流程及规范" aria-hidden="true">#</a> 标注流程及规范</h3>`,29),E={href:"https://github.com/wkentaro/labelme",target:"_blank",rel:"noopener noreferrer"},g=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> labelme
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># only for Apple Silicon</span>
brew <span class="token function">install</span> pyqt  <span class="token comment"># maybe pyqt5</span>
pip <span class="token function">install</span> labelme

<span class="token comment"># or</span>
brew <span class="token function">install</span> wkentaro/labelme/labelme  <span class="token comment"># command line interface</span>
<span class="token comment"># brew install --cask wkentaro/labelme/labelme  # app</span>
<span class="token comment"># or install standalone executable/app from:</span>
<span class="token comment"># https://github.com/wkentaro/labelme/releases </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在终端运行如下命令启动 labelme 后界面如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>labelme
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+r+'" alt="labelme"></p><p>标注数据集请按照如下步骤进行</p><ol><li><p>选择 <code>Open Dir</code> 打开数据集所在的目录，也就是 <code>$CULANEROOT/images</code></p></li><li><p>点击 <code>Create Polygons</code> 创建标注，右键选择 <code>Create LineStrip</code> 线段标记模式</p></li></ol><p><img src="'+p+'" alt="labelme"></p><ol><li><p>在图像上「从左到右」的顺序依次标注各个车道线，按照「<strong>从下到上</strong>」沿着车道线标注(10~20个点即可)，完成单个车道线标注后<code>Enter</code> ，此时弹窗需要设置类别并给出标注的类别，如下 <img src="'+m+'" alt="labelme"></p></li><li><p>点击 <code>Next Image</code>/<code>Prev Image</code> 依次完成全部图像的标注</p></li></ol>',9),B={href:"https://github.com/wkentaro/labelme",target:"_blank",rel:"noopener noreferrer"},x=s(`<h3 id="标注完成后数据处理" tabindex="-1"><a class="header-anchor" href="#标注完成后数据处理" aria-hidden="true">#</a> 标注完成后数据处理</h3><h3 id="数据集转换" tabindex="-1"><a class="header-anchor" href="#数据集转换" aria-hidden="true">#</a> 数据集转换</h3><p>labelme 标注的文件是 json 文件，需要检查并转换为 CULane 中使用的 txt 文件，这里给出转换的脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 datasets/labelme2culane.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行后，会生成 <code>imgtxt</code> 目录(目录结构参考<a href="#%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">数据集目录结构</a>)，其中包含了全部视频文件的转换后合并的数据及标签文件；生成一个 <code>images_visual</code> 目录，包含标注时候的可视化结果，用于检查标注是否正确</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$CULANEROOT</span>   <span class="token comment"># 环境变量中设置的数据集路径</span>
<span class="token operator">|</span>──<span class="token punctuation">..</span>.
<span class="token operator">|</span>──images_visual  <span class="token comment"># 标注结果检测</span>
<span class="token operator">|</span>──imgtxt         <span class="token comment"># CULane 格式数据集</span>
<span class="token operator">|</span>   <span class="token operator">|</span>──video1-0.jpg       <span class="token comment"># 图像</span>
<span class="token operator">|</span>   <span class="token operator">|</span>──video1-0.lines.txt <span class="token comment"># 车道线标注</span>
<span class="token operator">|</span>   └──<span class="token punctuation">..</span>.
└──<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，完成了数据集的制作</p><h3 id="数据集检查" tabindex="-1"><a class="header-anchor" href="#数据集检查" aria-hidden="true">#</a> 数据集检查</h3><p>可以使用 <code>datasets/check-culane.py</code> 检查转换结果是否正确</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 datasets/check-culane.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行后生成一个<code>imgtxt-check</code> 目录，其中包含了检查结果，如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$CULANEROOT</span>   <span class="token comment"># 环境变量中设置的数据集路径</span>
<span class="token operator">|</span>──<span class="token punctuation">..</span>.
<span class="token operator">|</span>──imgtxt  
<span class="token operator">|</span>──imgtxt-check <span class="token comment"># 检查结果</span>
└──<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function _(f,A){const n=d("ExternalLinkIcon");return c(),t("div",null,[v,a("p",null,[e("从 "),a("a",b,[e("CULane"),l(n)]),e(" 下载数据集，如果不使用该数据集，而是自制数据集则跳过该部分，从 "),h,e(" 继续。")]),k,a("p",null,[e("自制数据集需要安装 "),a("a",E,[e("labelme"),l(n)])]),g,a("blockquote",null,[a("p",null,[e("labelme 的使用方法、快捷键可以参考"),a("a",B,[e("官方文档"),l(n)])])]),x])}const O=o(u,[["render",_],["__file","dataset-culane.html.vue"]]);export{O as default};
