import{_ as o,r as l,o as i,c as r,a,d as s,b as e,e as t}from"./app-7b5e955f.js";const c={},p=a("h1",{id:"智能小车目标检测项目",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#智能小车目标检测项目","aria-hidden":"true"},"#"),s(" 智能小车目标检测项目")],-1),d=a("h2",{id:"依赖",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#依赖","aria-hidden":"true"},"#"),s(" 依赖")],-1),u={href:"https://github.com/ultralytics/yolov5.git",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token parameter variable">--branch</span> v6.1 https://github.com/ultralytics/yolov5.git
<span class="token function">bash</span> scripts/download.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v={href:"https://github.com/ultralytics/yolov5/releases/download/v6.1",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>按照如下创建环境并安装依赖环境</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">-n</span> yolov5 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span> <span class="token parameter variable">-y</span>
conda activate yolov5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token assign-left variable">numpy</span><span class="token operator">==</span><span class="token number">1.18</span>.5 <span class="token assign-left variable">protobuf</span><span class="token operator">==</span><span class="token number">3.20</span>.1 <span class="token punctuation">\\</span>
    <span class="token assign-left variable">onnx</span><span class="token operator">==</span><span class="token number">1.10</span>.0 onnx-simplifier<span class="token operator">==</span><span class="token number">0.3</span>.6 <span class="token punctuation">\\</span>
    <span class="token assign-left variable">onnxruntime</span><span class="token operator">==</span><span class="token number">1.10</span>.0 onnxruntime-gpu<span class="token operator">==</span><span class="token number">1.10</span>.0 <span class="token punctuation">\\</span>
    <span class="token string">&quot;pycuda&lt;2021.1&quot;</span> nvidia-pyindex nvidia-tensorrt
pip <span class="token function">install</span> <span class="token assign-left variable">torch</span><span class="token operator">==</span><span class="token number">1.8</span>.2 <span class="token assign-left variable">torchvision</span><span class="token operator">==</span><span class="token number">0.9</span>.2 <span class="token assign-left variable">torchaudio</span><span class="token operator">==</span><span class="token number">0.8</span>.2 <span class="token punctuation">\\</span>
    --extra-index-url https://download.pytorch.org/whl/lts/1.8/cu111
pip <span class="token function">install</span> <span class="token parameter variable">-r</span> yolov5/requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),m={href:"https://github.com/ultralytics/yolov5/issues/8012",target:"_blank",rel:"noopener noreferrer"},k=a("code",null,"numpy==1.18.5 protobuf==3.20.1",-1),g=a("li",null,"pytorch 安装 1.8.2(LTS) 版本",-1),_=t(`<h2 id="数据集" tabindex="-1"><a class="header-anchor" href="#数据集" aria-hidden="true">#</a> 数据集</h2><p>在 <code>data</code> 文件下配置数据集（参考 <code>data/drink.yaml</code>），需要注意的是：</p><ol><li>数据集采用相对路径表示，路径 <code>&lt;path&gt;/&lt;train&gt;</code> 的组合，如果不配置 <code>&lt;path&gt;</code> 那么需要直接写全 <code>&lt;train&gt;/&lt;val&gt;</code> 的路径</li><li>也可以通过 <code>.txt</code> 文件建立数据集，这个方法，之后会补充</li></ol><p>对于数据集，建议统一放在 <code>~/datasets</code> 下便于管理，然后通过建立软链接放在 <code>data</code> 目录下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ln</span> <span class="token parameter variable">-s</span> ~/datasets/drink ./yolov5/data/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>yolov8</p><p>https://github.com/triple-Mu/YOLOv8-TensorRT</p><p>https://github.com/mikel-brostrom/yolov8_tracking</p><h2 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/ultralytics/ultralytics.git yolov8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10);function f(y,x){const n=l("ExternalLinkIcon");return i(),r("div",null,[p,d,a("p",null,[s("目标检测算法使用 "),a("a",u,[s("yolov5"),e(n)]),s(" ，版本为 v6.1。下载源码及预训练文件")]),h,a("blockquote",null,[a("p",null,[s("无法连接的情况下，可以从 "),a("a",v,[s("releases"),e(n)]),s(" 页面手动下载")])]),b,a("blockquote",null,[a("ul",null,[a("li",null,[s("根据 "),a("a",m,[s("issue#8012"),e(n)]),s(" 的问题，建议提前安装指定版本 "),k]),g])]),_])}const w=o(c,[["render",f],["__file","index.html.vue"]]);export{w as default};
