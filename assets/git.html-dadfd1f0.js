import{_ as o,r as c,o as l,c as r,a as e,d as s,b as a,f as i,e as t}from"./app-0530136c.js";const d="/assets/git-space-708d3fc2.svg",p="/assets/HEAD-c3a7473e.png",u="/assets/git-checkout-new_branch-ee6e9cbc.svg",m="/assets/git-merge-63c51a83.svg",g="/assets/git-rebase-00c8acda.svg",h={},v=e("h1",{id:"git",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git","aria-hidden":"true"},"#"),s(" git")],-1),b=e("h2",{id:"git-提交",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git-提交","aria-hidden":"true"},"#"),s(" git 提交")],-1),k=e("span",{id:"commit-type"},null,-1),f={href:"https://gitmoji.dev",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>🎉 initial: Start an adventure <span class="token operator">&lt;</span> 新开项目，初次提交 Begin a project. <span class="token operator">&gt;</span>
✨ feat:        <span class="token operator">&lt;</span> 引入新功能 Introduce new features. <span class="token operator">&gt;</span>
💡 feat:        <span class="token operator">&lt;</span> 引入新功能 Introduce new features. <span class="token operator">&gt;</span>
🪶 feat:        <span class="token operator">&lt;</span> 引入新功能 Introduce new features. <span class="token operator">&gt;</span>
🚧 fix:         <span class="token operator">&lt;</span> Fix a bug <span class="token operator">&gt;</span>
🐛 fix:         <span class="token operator">&lt;</span> Fix a bug <span class="token operator">&gt;</span>
⬆️ dependencies:<span class="token operator">&lt;</span> 更新依赖版本 Upgrade dependencies. <span class="token operator">&gt;</span>
⬇️ dependencies:<span class="token operator">&lt;</span> 降低依赖版本 Downgrade dependencies. <span class="token operator">&gt;</span>
📌 dependencies:<span class="token operator">&lt;</span> 固定依赖版本 Pin dependencies to specific versions. <span class="token operator">&gt;</span>
🚑️ hotfix:      <span class="token operator">&lt;</span> 重要补丁 Critical hotfix. <span class="token operator">&gt;</span>
📦 chore:       <span class="token operator">&lt;</span> 构建过程或辅助工具的变动 / 其他修改（不在上述类型中的修改） <span class="token operator">&gt;</span>
🎨 style:       <span class="token operator">&lt;</span> 代码格式修改 Improve structure / <span class="token function">format</span> of the code. <span class="token operator">&gt;</span> 
📝 docs:        <span class="token operator">&lt;</span> 修改文档 Add or update documentation. <span class="token operator">&gt;</span> 
🛠 build:       <span class="token operator">&lt;</span> 影响项目构建或依赖项修改 <span class="token operator">&gt;</span>
🚀 perf:        <span class="token operator">&lt;</span> 不影响代码内部行为的前提下，优化程序性能 Improve performance.  <span class="token operator">&gt;</span> 
🔨 refactor:    <span class="token operator">&lt;</span> 代码重构（重构，在不影响代码内部行为、功能下的代码修改） <span class="token operator">&gt;</span>
🔬 test:        <span class="token operator">&lt;</span> 测试用例新增、修改 Add, update, or pass tests. <span class="token operator">&gt;</span>
✅ release:     <span class="token operator">&lt;</span> 发布新版本 <span class="token operator">&gt;</span>
🔄 workflow:    <span class="token operator">&lt;</span> 工作流相关文件修改 <span class="token operator">&gt;</span>
🔀 merge:       <span class="token operator">&lt;</span> 合并分支 Merge branches. <span class="token operator">&gt;</span>
⏪️ revert:      <span class="token operator">&lt;</span> 恢复更改 Revert changes. <span class="token operator">&gt;</span>
⏳ revert:      <span class="token operator">&lt;</span> 恢复上一次提交 <span class="token operator">&gt;</span>
🔖 tag:         <span class="token operator">&lt;</span> 发布版本 Release / Version tags. <span class="token operator">&gt;</span>

📦 chore: update <span class="token variable"><span class="token variable">\`</span>.gitignore<span class="token variable">\`</span></span>
🚚 chore: move/rename <span class="token function">file</span> <span class="token operator">&lt;</span> 移动或重命名文件 <span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>某知乎网友：“<em>这不是有没有必要，而是有没有意思。如果觉得给我的commit添加一个表情有意思的话，花点时间看看文档又有什么关系呢，又能浪费几分钟时间呢，大不了少花点时间看手机嘛</em>”</p></blockquote><p>提交的时候，按照如下格式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span><span class="token punctuation">)</span>: <span class="token operator">&lt;</span>subject<span class="token operator">&gt;</span>
// 空一行
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
// 空一行
<span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>type</code> 是必须的，是关于本次<a href="#commit-type">提交的类型标签</a></li><li><code>scope</code> 用于说明 commit 影响的范围</li><li><code>subject</code> 是必须的， commit 的简短描述，要求： <ul><li>义动词开头，使用第一人称现在时（change，而不是changed）</li><li>第一个字母小写</li><li>结尾不加句号(.)</li></ul></li><li><code>body</code> 是对 commit 的详细描述，要求： <ul><li>使用第一人称现在时</li></ul></li></ul><h2 id="git-配置" tabindex="-1"><a class="header-anchor" href="#git-配置" aria-hidden="true">#</a> Git 配置</h2><p>开始之前，需要对git进行一些配置，关键是配置用户名和邮箱，这是用于与远端仓库进行联系的钥匙。</p><p>全局配置文件在 <code>~/.gitconfig</code> 和 <code>/etc/gitconfig</code> 中。查看全部配置，也可以查看特定的配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--list</span>
<span class="token function">git</span> config user.name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置用户名 <code>user.name</code> 和邮箱 <code>user.email</code>， 同时可以仅为当前项目 <code>–-local</code> 也可以全局配置 <code>--global</code> (默认)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config user.name  <span class="token string">&quot;your_name&quot;</span>
<span class="token function">git</span> config user.email <span class="token string">&quot;your_email@gmail.com&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;your_name&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-的一些概念" tabindex="-1"><a class="header-anchor" href="#git-的一些概念" aria-hidden="true">#</a> Git 的一些概念</h2><p>Git是一个分布式版本控制系统，它可以帮助你跟踪代码的变化，并与其他开发者协作。</p><p>版本控制是一种管理文件历史记录的方法，它可以让你回溯到任何一个时间点的文件状态，比较不同版本之间的差异，以及合并多人的修改。版本控制对于软件开发非常重要，因为它可以帮助你保持代码的完整性和一致性，避免错误和冲突，以及提高团队协作效率。</p><p><img src="`+d+`" alt="git仓库"></p><ul><li><strong>工作区 (Workspace)</strong>：写代码的地方，在编辑器(vscode)写的每一行代码都是在工作区进行的</li><li><strong>暂存区 (Index/Stage)</strong>：对工作区的代码进行暂存并等待提交，进入了暂存区才会真正进入版本控制阶段（<code>.git/index</code> 中保存了从工作区暂存的更改）</li><li><strong>本地仓库 (Repository)</strong>：提交后的代码在本地仓库中进行版本控制</li><li><strong>远程仓库 (Remote)</strong>：云端仓库，一般存在 Github 上</li></ul><h2 id="git-操作" tabindex="-1"><a class="header-anchor" href="#git-操作" aria-hidden="true">#</a> Git 操作</h2><h3 id="开始一个新项目" tabindex="-1"><a class="header-anchor" href="#开始一个新项目" aria-hidden="true">#</a> 开始一个新项目</h3><p>在开一个新项目时候，需要初始化一下，并且进行一次提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init        <span class="token comment"># 初始化仓库，生成 .git 目录</span>
<span class="token function">touch</span> README.md <span class="token comment"># 给项目新建一个说明文件吧</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>       <span class="token comment"># （或者）添加文件到暂存区。</span>
<span class="token function">git</span> commit      <span class="token comment"># 将暂存区内容添加到仓库中。</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;🎉 initial: Start an adventure&quot;</span> <span class="token comment"># （或者）将暂存区内容添加到仓库中，并且添加注释</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加文件-add" tabindex="-1"><a class="header-anchor" href="#添加文件-add" aria-hidden="true">#</a> 添加文件 add</h3><p>将<strong>工作区</strong>的文件添加至<strong>暂存区</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> file1 file2 <span class="token comment"># 添加一个或多个文件到暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token function">dir</span>         <span class="token comment"># 添加指定目录到暂存区，包括子目录</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>           <span class="token comment"># 添加当前目录下的所有文件到暂存区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看状态" tabindex="-1"><a class="header-anchor" href="#查看状态" aria-hidden="true">#</a> 查看状态</h3><p>查看当前分支下<strong>工作区</strong>和<strong>暂存区</strong>的状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status <span class="token punctuation">[</span>-s<span class="token punctuation">]</span>   <span class="token comment"># -s (可选) 表示简短的输出结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以得到如下输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>On branch dev             <span class="token comment"># 当前所处的分支</span>
Your branch is ahead of <span class="token string">&#39;origin/dev&#39;</span> by <span class="token number">1</span> commit.
  <span class="token punctuation">(</span>use <span class="token string">&quot;git push&quot;</span> to publish your <span class="token builtin class-name">local</span> commits<span class="token punctuation">)</span>

Changes to be committed:      <span class="token comment"># 已经在暂存区, 等待添加到HEAD中的文件</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span>

Changes not staged <span class="token keyword">for</span> commit:<span class="token comment"># 修改的文件，但是没有添加到暂存区</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>

Untracked files:                <span class="token comment"># 未跟踪的文件</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),x=e("code",null,"git commit",-1),w=e("code",null,"git commit",-1),q=e("code",null,"git add",-1),y={href:"https://www.yiibai.com/git/git_status.html",target:"_blank",rel:"noopener noreferrer"},A=t(`<h3 id="git-log-查看提交日志" tabindex="-1"><a class="header-anchor" href="#git-log-查看提交日志" aria-hidden="true">#</a> git log 查看提交日志</h3><p><code>git log</code> 命令用于查看历史提交的信息，包含了提交id(哈希 c)、作者、邮箱、日期时间和提交信息等</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> log
commit 82484f07fd6b5468036be84b4695a8206e0ccc83
Author: <span class="token operator">&lt;</span>your_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>your_email@mail.com<span class="token operator">&gt;</span>
Date:   Tue Feb <span class="token number">21</span> 09:20:39 <span class="token number">2023</span> +0800

    🚚 chore: move worksapce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>--online</code> 参数只输出提交id(哈希 SHA1值)和提交信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> log <span class="token parameter variable">--oneline</span>
82484f07 🚚 chore: move worksapce
a88ccec2 🛠 build: <span class="token function">add</span> images to project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>40位SHA1值过长，实际上在项目中取前7位产生冲突的概率很小，因此 git 使用前7位对提交记录进行表示<br><code>82484f07fd6b5468036be84b4695a8206e0ccc83</code> -&gt; <code>82484f07</code></p></blockquote>`,6),D=e("code",null,"--graph",-1),E={href:"https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph",target:"_blank",rel:"noopener noreferrer"},H=e("li",null,[e("code",null,"--stat"),s(" 会显示哪些文件进行了修改")],-1),G=e("li",null,[e("code",null,'--author="<author_name>"'),s(" 将会过滤出指定用户 "),e("code",null,"<author_name>")],-1),S=e("li",null,[e("code",null,`--after '02-10-2023'"`),s(" / "),e("code",null,`--before '02-21-2023'"`),s(" 限定范围日期")],-1),I=e("h2",{id:"分支",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#分支","aria-hidden":"true"},"#"),s(" 分支")],-1),z=e("p",null,"git 中的分支，本质上是个指向 commit 对象的可变指针。",-1),B=e("div",{id:"git-HEAD"},null,-1),N=t(`<div class="language-HEAD line-numbers-mode" data-ext="HEAD"><pre class="language-HEAD"><code>ref: refs/heads/dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而 <code>ref</code> 指向的则是 <code>.git/refs/heads</code> ，打开该目录，可以看到当前有 <code>dev</code> 和 <code>master</code> 两个文件</p><p><img src="`+p+`" alt="HEAD 分支"></p><p>命令 <code>git show head</code> 是用来检查 Head 的状态的，该命令将显示 Head 的位置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> show HEAD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="分支命名" tabindex="-1"><a class="header-anchor" href="#分支命名" aria-hidden="true">#</a> 分支命名</h3><p>Git 常见分支命名</p><table><thead><tr><th>分支</th><th>说明</th></tr></thead><tbody><tr><td><code>main</code>/<code>master</code></td><td>主分支。正式版本，最稳定的</td></tr><tr><td><code>dev</code></td><td>开发分支。功能最新最全的分支，在此分支上修复 bug</td></tr><tr><td><code>feat-*</code></td><td>新功能分支。某个功能正在开发阶段，在此分支上写 bug</td></tr><tr><td><code>release-*</code></td><td>发布定期要上线的功能</td></tr><tr><td><code>bug-*</code>/<code>issue-*</code></td><td>修复线上代码的 bug</td></tr></tbody></table><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><h3 id="查看分支" tabindex="-1"><a class="header-anchor" href="#查看分支" aria-hidden="true">#</a> 查看分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch    <span class="token comment"># 查看本地分支，带 * 表示当前分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-a</span> <span class="token comment"># 查看本地和远程分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建和切换分支" tabindex="-1"><a class="header-anchor" href="#创建和切换分支" aria-hidden="true">#</a> 创建和切换分支</h3><p>查看分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span>      <span class="token comment"># 新建分支</span>
<span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span>    <span class="token comment"># 切换至指定分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span> <span class="token comment"># 新建并切换至新分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt="new branch"></p><h3 id="获取远程代码" tabindex="-1"><a class="header-anchor" href="#获取远程代码" aria-hidden="true">#</a> 获取远程代码</h3><p>从远程获取代码主要有两种方式</p><ul><li><code>git pull</code></li><li><code>git fetch</code> (推荐)</li></ul><p><code>git pull</code> 将从远程 (<code>origin</code>) 拉取最新版本到本地，自动合并(<code>merge</code>)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种方法适用于 vscode 的时候， vscode 会自动弹出冲突位置，解决完成冲突后，提交一次 commit 就可以推送代码</p><p><code>git fetch</code> 从远程拉取最新版本到本地，不会自动合并(<code>merge</code>) ，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch        <span class="token comment"># 拉取远程全部分支</span>
<span class="token function">git</span> fetch origin <span class="token comment"># 同上一条</span>
<span class="token function">git</span> fetch origin main <span class="token comment"># 拉取远程的 main 分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看文件差异</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-p</span> main<span class="token punctuation">..</span>origin/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令执行完后需要执行 <code>git merge</code> 将远程分支合并至本地分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge origin/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种方式适合于终端合并代码</p><blockquote><p>每天工作开始之前，没啥事就 pull 自己的分支，然后 fetch 整个项目，开始愉快的一天</p></blockquote><h3 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支" aria-hidden="true">#</a> 合并分支!!!</h3><p>实际上合并分支有 <a href="#git-merge"><code>git merge</code></a> 和 <a href="#git-rebase"><code>git rebase</code></a> 两种方式</p><span id="git-merge" style="font-family:&#39;Smiley Sans&#39;;font-size:1.3rem;"> git merge </span>`,32),j=t(`<p>例如将 dev 分支合并至 main 分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main <span class="token comment"># 切换分支</span>
<span class="token function">git</span> merge dev     <span class="token comment"># 将 dev 合并进当前分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候合并会产生一个新的提交(<code>76f1e80</code>) <code>&#39;Merge branch &#39;master&#39; of...</code></p><p><img src="`+m+'" alt="git-merge"></p><span id="git-rebase" style="font-family:&#39;Smiley Sans&#39;;font-size:1.3rem;"> git rebase </span>',5),C=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout dev  <span class="token comment"># 切换分支</span>
<span class="token function">git</span> rebase main   <span class="token comment"># 将 main 变基至当前分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 dev 分支上执行 rebase 则会将 main 分支最后的提交作为基点，逐个应用 dev 的每个更改。</p><p>可以看出， rebase 的方式像是把当前分支的历史提交“接”到了 <code>main</code> 分支最新提交的后面，因此使用 rebase 则不会像 merge 那也因为合并而产生新的提交</p><p>在工作环境中，我们会在自己的分支上进行开发</p><p><img src="`+g+'" alt="git-rebase"></p>',5),V=e("code",null,"merge",-1),M=e("code",null,"rebase",-1),R={href:"https://www.zhihu.com/question/36509119/answer/1990894567",target:"_blank",rel:"noopener noreferrer"},U=e("ul",null,[e("li",null,"将主分支 rebase 到自己的分支上"),e("li",null,"将自己分支的修改 merge 到主分支上")],-1),F={href:"https://www.zhihu.com/question/61283395/answer/186122300",target:"_blank",rel:"noopener noreferrer"},L=t(`<h3 id="分支合并策略" tabindex="-1"><a class="header-anchor" href="#分支合并策略" aria-hidden="true">#</a> 分支合并策略</h3><h2 id="储藏代码" tabindex="-1"><a class="header-anchor" href="#储藏代码" aria-hidden="true">#</a> 储藏代码</h2><blockquote><p><strong>背景：为什么需要储藏代码呢？</strong><br> 某一天，在 <code>feature</code> 分支上快乐地写着新的 BUG，突然，因为不可抗力因素必须切换到 <code>main</code> 分支或者其他分支上 checkout 一个 hotfix 分支出来紧急修复之前写过的 BUG。但是当前的代码还没有写完，也没有提交，更不可能删了不要，因此就需要储藏当前分支的代码</p></blockquote><p>执行 <code>git stash</code> 对当前的分支的修改进行储藏，之后</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> stash
<span class="token comment"># 对储藏添加标记</span>
<span class="token function">git</span> stash save <span class="token punctuation">[</span>stashMessage<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后，用 <code>git status</code> 查看分支状态，工作区是干净的。就可以切换分支进行修改。</p><p><code>git stash list</code> 可以查看储藏记录列表</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> stash list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>储藏记录每一条标识如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>stash@<span class="token punctuation">{</span>index<span class="token punctuation">}</span>: WIP on <span class="token punctuation">[</span>分支名<span class="token punctuation">]</span>: <span class="token punctuation">[</span>最近一次的commitID<span class="token punctuation">]</span> <span class="token punctuation">[</span>最近一次的提交信息<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改完成后再取出储藏的修改，二选一</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> stash pop                 <span class="token comment"># 取出最近一次储藏的修改到工作区</span>
<span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span>index<span class="token punctuation">}</span> <span class="token comment"># 取出指定index的储藏的修改到工作区中</span>
<span class="token function">git</span> stash drop stash@<span class="token punctuation">{</span>index<span class="token punctuation">}</span>  <span class="token comment"># 将指定index的储藏从储藏记录列表中删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修复-bug" tabindex="-1"><a class="header-anchor" href="#修复-bug" aria-hidden="true">#</a> 修复 BUG</h2><p>https://blog.csdn.net/Huang_ZX_259/article/details/122657055</p><h2 id="代码回滚" tabindex="-1"><a class="header-anchor" href="#代码回滚" aria-hidden="true">#</a> 代码回滚</h2><h3 id="撤回" tabindex="-1"><a class="header-anchor" href="#撤回" aria-hidden="true">#</a> 撤回</h3><p><code>git reflog</code> 能列出你在 Git 上的所有操作记录。你只要找到 <code>HEAD@{index}</code> 前面所对应的操作索引，就可以 <code>git reset</code> 进行退回：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reflog
<span class="token function">git</span> reset HEAD@<span class="token punctuation">{</span>index<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用时需将HEAD@{index}替换为对应索引。</p></blockquote><h3 id="获取指定提交-cherry-pick" tabindex="-1"><a class="header-anchor" href="#获取指定提交-cherry-pick" aria-hidden="true">#</a> 获取指定提交 cherry-pick</h3><p>https://zhuanlan.zhihu.com/p/58962086</p>`,21),P=e("h2",{id:"参考资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),T={href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"},W={href:"https://geeeeeeeeek.github.io/git-recipes/",target:"_blank",rel:"noopener noreferrer"},$={href:"https://blog.csdn.net/weixin_33127753/article/details/88870257",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.zhihu.com/question/36509119",target:"_blank",rel:"noopener noreferrer"},O={href:"https://blog.csdn.net/xiaojie_570/article/details/96486325",target:"_blank",rel:"noopener noreferrer"};function X(Y,Z){const n=c("ExternalLinkIcon");return l(),r("div",null,[v,b,e("p",null,[k,s("提交的类型标签可以参考 "),e("a",f,[s("gitmoji"),a(n)]),s(" ，常用的如下：")]),_,e("p",null,[s("显示索引文件和当前HEAD提交之间的差异，在工作树和索引文件之间有差异的路径以及工作树中没有被Git跟踪的路径。 第一个是通过运行"),x,s("来提交的; 第二个和第三个是你可以通过在运行"),w,s("之前运行"),q,s("来提交的。 更多请阅读："),e("a",y,[s("git status命令"),a(n)])]),i(" ### 状态码 "),A,e("ul",null,[e("li",null,[D,s(" 可以显示分支结构，不过在终端中还是有些麻烦，无所谓，在 vscode 中插件 "),e("a",E,[s("Git Graph"),a(n)]),s(" 会出手")]),H,G,S]),I,z,B,s(" HEAD 当前分支引用的指针，指向某一次 commit (默认上一次 commit )，通过 HEAD 可以知道当前工作在哪一个分支上。而该指针存储于 `.git/HEAD` 文件内，打开文件内容为 "),N,s("将两个或两个以上的开发历史加入(合并)一起。 "),j,s(" 名为变基 "),C,e("p",null,[s("关于 "),V,s(" 和 "),M,s(" 在知乎上有个"),e("a",R,[s("讨论"),a(n)]),s(" ，而 “rebase 的最大好处并不是消除 merge ，而是避免 merge 的交织”，因此建议如下以避免历史提交中无意义的交织：")]),U,e("blockquote",null,[e("p",null,[s("尤雨溪曾​说过："),e("a",F,[s("“多用 rebase”"),a(n)])])]),i(` > “rebase的最大好处并不是消除merge，而是避免merge的交织。  
> 简要来说，就是在merge进被合分支（如master）之前，最好将自己的分支给rebase到最新的被合分支（如master）上，然后用pull request创建merge请求。  
> 我个人一般在pull request里面还是采用普通的merge，当然可能有的小伙伴喜欢rebase merge等，我觉得要看具体情况。  
> 其实本文的关键就是合理利用 rebase和merge来避免git历史提交里的无意义的‘交织’。” `),L,i(` 已提交,没有push  
1)git reset --soft 撤销 commit  
2)git reset --mixed 撤销 commit 和 add 两个动作  
2.已提交，并且push  
1)git reset --hard 撤销并舍弃版本号之后的提交记录。使用需要谨慎。  
2)git revert 撤销。但是保留了提交记录。并且他是移除指定的提交。 `),i(" ## 工作场景 "),i(` ![工作流程](http://www.yiibai.com/uploads/images/201707/0707/497150749_38351.png) 

简单来说，就这七点：使用 git rebase 让提交记录更加清晰可读 使用  git reflog + git reset 跳到任意 commit 使用 git cherry-pick 获取指定的 commit 使用 git commit --amend 更改提交内容 使用 git revert 回滚某次的提交 使用 git stash 来暂存文件 配置 git alias 提升工作效率

作者：Johan约翰
链接：https://www.zhihu.com/question/60110166/answer/2561561742
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

`),P,e("ul",null,[e("li",null,[s("官方 "),e("a",T,[s("Git Book"),a(n)])]),e("li",null,[e("a",W,[s("🥡Git 菜单"),a(n)])]),e("li",null,[e("a",$,[s("git 图解本地工作区·缓存区·本地仓库·远程仓库-CSDN"),a(n)])]),e("li",null,[e("a",J,[s("在开发过程中使用 git rebase 还是 git merge，优缺点分别是什么？ - 知乎"),a(n)])]),e("li",null,[e("a",O,[s("git pull时产生'Merge branch 'master' of...问题 - CSDN"),a(n)])])])])}const Q=o(h,[["render",X],["__file","git.html.vue"]]);export{Q as default};
